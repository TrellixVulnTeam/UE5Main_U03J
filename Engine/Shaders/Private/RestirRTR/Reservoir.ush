#ifndef RESERVOIR_USH
#define RESERVOIR_USH

struct Reservoir
{
    float w_sum;
    uint payload;
    float M;
    float W;

    static Reservoir create() 
    {
        Reservoir res;
        res.w_sum = 0;
        res.payload = 0;
        res.M = 0;
        res.W = 0;
        return res;
    }

    static Reservoir from_raw(float4 raw) 
    {
        Reservoir res;
        res.w_sum = raw.x;
        res.payload = asuint(raw.y);
        res.M = raw.z;
        res.W = raw.w;
        return res;
    }

    float4 as_raw() 
    {
        return float4(w_sum, asfloat(payload), M, W);
    }

    bool update(float w, uint sample_payload, inout uint rnd) 
    {
        this.w_sum += w;
        this.M += 1;
        const float dart = rnd;
        const float prob = w / this.w_sum;

        if (prob >= dart) 
        {
            this.payload = sample_payload;
            return true;
        } else 
        {
            return false;
        }
    }
};

#endif