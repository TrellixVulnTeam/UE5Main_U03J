
#if TEMPORAL_SPATIAL_RESAMPLING

#include "../Common.ush"
#include "../DeferredShadingCommon.ush"
#include "../SceneTextureParameters.ush"
#include "../ScreenSpaceDenoise/SSDPublic.ush"
#include "../MortonCode.ush"
#include "../BRDF.ush"

#include "../RayTracing/RayTracingCommon.ush"
#include "../RayTracing/RayTracingDeferredShadingCommon.ush"
#include "../RayTracing/RayTracingReflectionsCommon.ush"
#include "../RayTracing/RayTracingDeferredReflections.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" 
#include "../RestirGI/RandomNumberUtils.ush"
#include "ReservoirManagement.ush"


#define INITIAL_SAMPLE_PASS_NUM		0
#define TEMPORAL_SAMPLE_PASS_NUM	1
#define SPATIAL_SAMPLE_PASS_NUM		2
#define EVALUATION_PASS_NUM			3


int MaxTemporalHistory;
float2 UpscaleFactor;
int2  RayTracingBufferSize;
Texture2D<float> DepthHistory;
Texture2D<float4> NormalHistory;
float ReflectionMaxRoughness;
float ReflectionSmoothBias;
float ReflectionMaxNormalBias;
RaytracingAccelerationStructure                 TLAS;
int     ApproxVisibility;


#ifndef MAX_SPATIAL_SAMPLES
#define MAX_SPATIAL_SAMPLES		16
#endif

#ifndef USE_LDS_FOR_SPATIAL_RESAMPLE
#define USE_LDS_FOR_SPATIAL_RESAMPLE	1
#endif


int    InputSlice;
int    OutputSlice;
float   SpatialDepthRejectionThreshold;
float   SpatialNormalRejectionThreshold;
float   SpatialSamplingRadius;
int     SpatialSamples;
int     SpatialSamplesBoost;

// uint NeighborOffsetMask;
// Buffer<float2> NeighborOffsets;

static const float GOLDEN_ANGLE = 2.39996323;
 
bool CheckVisibility(int2 PixelCoord, FGBufferData GBuffer, float3 WorldPosition, Reservoir preSample)
{
    float3 LightPosition = preSample.sampleRef.Position;
    float3 Direction = (LightPosition - WorldPosition);

    RayDesc Ray;	
    Ray.Origin = WorldPosition;
    Ray.Direction = normalize(Direction);
    Ray.TMin = 0;
    Ray.TMax = length(Direction) - 1e-1;
    Ray.TMax = min(Ray.TMax, 1e27);

    float3 BiasNormal = GBuffer.WorldNormal;
    if ( dot(BiasNormal, Ray.Direction) < 0.0)
    {
        BiasNormal = -BiasNormal;
    }
    ApplyPositionBias(Ray, BiasNormal, ReflectionMaxNormalBias);

    uint RayFlags = 0;
    const uint InstanceInclusionMask = RAY_TRACING_MASK_SHADOW;

    RayFlags |= RAY_FLAG_FORCE_OPAQUE;

    // #if !ENABLE_TWO_SIDED_GEOMETRY
    //         RayFlags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    // #endif

    FMinimalPayload MinimalPayload = TraceVisibilityRay(
        TLAS,
        RayFlags,
        InstanceInclusionMask,
        PixelCoord,
        Ray);

    return !MinimalPayload.IsHit();
}

RAY_TRACING_ENTRY_RAYGEN(TemporalResamplingRGS)
{
	uint2 DispatchThreadId = DispatchRaysIndex().xy;
	const uint2 ViewSize = uint2(View.ViewSizeAndInvSize.xy);
	const bool bValidThread = all(DispatchThreadId < ViewSize);

	DispatchThreadId = select(DispatchThreadId < ViewSize, DispatchThreadId, DispatchThreadId - ViewSize); // faster than mod

	const float2 BufferUV = (float2(DispatchThreadId + View.ViewRectMin.xy) + 0.5) * View.BufferSizeAndInvSize.zw;
	const float2 ViewportUV = BufferUVToViewportUV(BufferUV);

	const float2 ScreenPos = ViewportUVToScreenPos(ViewportUV);
	const uint2 PixelRandomSeed = Rand3DPCG16(int3(DispatchThreadId, View.StateFrameIndexMod8)).xy;

	const int2 PixelCoord = int2(BufferUV * RayTracingBufferSize);

	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(BufferUV);
	GBuffer.Roughness = GetRayTracingClearCoatApproximateRoughness(GBuffer);
	GBuffer.Roughness = ApplySmoothBias(GBuffer.Roughness, ReflectionSmoothBias);

	const float SceneDepth = GBuffer.Depth;
	const float DeviceZ = ConvertToDeviceZ(SceneDepth);
	const float RoughnessFade = GetRoughnessFade(GBuffer.Roughness, ReflectionMaxRoughness);
	const bool bValidPixel = RoughnessFade > 0;
	 uint LinearIndex = CalcLinearIndex(PixelCoord);
	FRandomContext RandContext = FRandomContext::Create(LinearIndex, View.StateFrameIndex + TEMPORAL_SAMPLE_PASS_NUM * 63 );

	Reservoir state = Reservoir::Empty();
	if (bValidPixel && bValidThread)
    {
		const float3 TranslatedWorldPosition = mul(float4(ScreenPos * SceneDepth, SceneDepth, 1), View.ScreenToTranslatedWorld).xyz;
		const float3 V = normalize(View.TranslatedWorldCameraOrigin - TranslatedWorldPosition);
		const float3 N = GBuffer.WorldNormal;
		const float NoV = max(0, dot(N, V));
        Reservoir curSample = Reservoir::Load(ReadReservoirData(DispatchThreadId, InputSlice));

        int historyLimit = min(Reservoir::MaxM,MaxTemporalHistory * curSample.M);
        state.CombineReservoirs(curSample, /* random = */ 0.5, curSample.targetPdf);
        // state = curSample;
        // Backproject this pixel to last frame

        // start by just using our sample position
        int2 prevPos = PixelCoord;
        float ExpectedPrevLinearDepth = GBuffer.Depth;

        float2 ViewUV = (float2(PixelCoord) + 0.5) * View.ViewSizeAndInvSize.zw;
        float4 NDC = float4(ViewUV * float2(2, -2) + float2(-1, 1), DeviceZ, 1);

    #if GBUFFER_HAS_VELOCITY && 0
        // Some objects can get marked as not having velocities, which leads to DecodeGBuffer zeroing them
        // This appears to be errant under some conditions, so overriding the rejection produces better results
        GBuffer.Velocity = GBufferVelocityTexture.Load(int3(PixelCoord, 0));
    #endif
        if (GBuffer.Velocity.x > 0.0)
        {
            float2 Velocity = DecodeVelocityFromTexture(GBuffer.Velocity).xy;
            float2 PrevNDC = NDC.xy - Velocity;
            float2 PrevUV = (PrevNDC.xy * float2(1, -1) + 1) * 0.5;
            prevPos = PrevUV * View.ViewSizeAndInvSize.xy + View.ViewRectMin.xy;
            ExpectedPrevLinearDepth = ConvertFromDeviceZ(DeviceZ - DecodeVelocityFromTexture(GBuffer.Velocity).z);
        }
        else
        {
            float4 PrevNDC = mul(NDC, View.ClipToPrevClip);
            PrevNDC.xyz /= PrevNDC.w;
            float2 PrevUV = (PrevNDC.xy * float2(1, -1) + 1) * 0.5;
            prevPos = PrevUV * View.ViewSizeAndInvSize.xy + View.ViewRectMin.xy;

            ExpectedPrevLinearDepth = ConvertFromDeviceZ(PrevNDC.z);
        }

        bool foundNeighbor = false;//DisocclusionHeuristic(ScreenPos, ConvertToDeviceZ(SceneDepth), PrevUV);
		const float radius = 3;

		// Try to find a matching surface in the neighborhood of the reprojected pixel
		for (int i = 0; i < 9; i++)
		{
			int2 offset = 0;
			if (i > 0)
			{
				offset = int2((RandContext.GenerateSample2D() - 0.5f) * radius);
			}
			int2 idx = prevPos + offset;

			float PrevDepth = ConvertFromDeviceZ(DepthHistory.Load(int3(idx, 0)).r);
			float3 PrevWorldNormal = normalize(DecodeNormal(NormalHistory.Load(int3(idx, 0)).xyz));

			// TODO: refine sample rejection tests
			if (dot(GBuffer.WorldNormal, PrevWorldNormal) < 0.5)
			{
				continue;
			}

			if (abs(ExpectedPrevLinearDepth - PrevDepth) / ExpectedPrevLinearDepth > 0.1)
			{
				continue;
			}
			prevPos = idx;
			foundNeighbor = true;
			break;
		}

		if (foundNeighbor)
		{
            const uint2 prePosId = clamp(floor(prevPos / UpscaleFactor  ), uint2(0,0), ReservoirBufferDim.xy - 1);
            Reservoir prevSample = Reservoir::Load(ReadReservoirHistoryData(prePosId, 0));
            prevSample.M = min(prevSample.M, MaxTemporalHistory);

			float Visible = 1.0;
            
            float3 OffsetB = prevSample.sampleRef.Position - prevSample.sampleRef.CreationPoint;
            float3 OffsetA = prevSample.sampleRef.Position + LWCHackToFloat(PrimaryView.PreViewTranslation) - TranslatedWorldPosition;

            float3 SampleL = normalize(OffsetA);
            const float a2 = max(1e-5, Pow4(GBuffer.Roughness));
            const float3 SampleH = normalize(V + SampleL);
            const float SampleNoH = max(0, dot(N, SampleH));

            float PrevNdf = D_GGX(a2, SampleNoH);
            prevSample.M = min(prevSample.M, MaxTemporalHistory * smoothstep(0.005, 0.01, PrevNdf));
			const float SampleNoL = max(0, dot(N, SampleL));
            const float LocalBRDF = D_GGX(a2, SampleNoH) * Vis_Smith(a2, NoV, SampleNoL) * SampleNoL;

            if( ApproxVisibility)
                if( !CheckVisibility(PixelCoord, GBuffer, TranslatedWorldPosition, prevSample))
                    Visible = 0;
            float Jocbian = 1.0;
            if (prevSample.sampleRef.IsValid())
            {
                float pNewTN =  max(1e-3, Luminance(prevSample.sampleRef.Irradiance * LocalBRDF));
            
                state.CombineReservoirs(prevSample, RandContext.GenerateSample1D(), Visible * pNewTN * Jocbian);
            }
		}
        state.FinalizeResampling(1, state.M);
    }

    WriteReservoirData(DispatchThreadId, OutputSlice, state.Store());
}

// [numthreads(8, 8, 1)]
// RAY_TRACING_ENTRY_RAYGEN(TemporalResamplingRGS)
// {
//     uint2 DispatchThreadId = DispatchRaysIndex().xy + View.ViewRectMin.xy;
//     //uint2 DispatchThreadId = DispatchThreadID.xy + View.ViewRectMin.xy;
// 	// uint2 PixelCoord = GetPixelCoord(DispatchThreadId, UpscaleFactor);
//     uint2 PixelCoord = floor(float2(DispatchThreadId) * UpscaleFactor);
// 	if (any(PixelCoord > View.ViewSizeAndInvSize.xy))
// 	{
// 		return;
// 	}
//     uint LinearIndex = CalcLinearIndex(PixelCoord);
// 	FRandomContext RandContext = FRandomContext::Create(LinearIndex, View.StateFrameIndex + TEMPORAL_SAMPLE_PASS_NUM * 63 );

// 	const float2 BufferUV = (PixelCoord + 0.5) * View.BufferSizeAndInvSize.zw;
// 	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(BufferUV);
// 	float DeviceZ = SceneDepthTexture.Load(int3(PixelCoord, 0)).r;

//     float SceneDepth = ConvertFromDeviceZ(DeviceZ);
// 	// float3 WorldPosition = ReconstructWorldPositionFromDepth(BufferUV, SceneDepth);
//     float3 TranslatedWorldPosition, CameraDirection;
//     ReconstructTranslatedWorldPositionAndCameraDirectionFromDeviceZ(PixelCoord, DeviceZ, TranslatedWorldPosition, CameraDirection);
// 	float3 WorldNormal = GBuffer.WorldNormal;
//     GBuffer.Roughness = GetRayTracingClearCoatApproximateRoughness(GBuffer);
// 	GBuffer.Roughness = ApplySmoothBias(GBuffer.Roughness, ReflectionSmoothBias);
//     const float RoughnessFade = GetRoughnessFade(GBuffer.Roughness, ReflectionMaxRoughness);
//     const bool bIsValidPixel = DeviceZ > 1e-3 && DeviceZ < 0.999 && RoughnessFade > 0;

//     float3 V = -CameraDirection;
//     const float NoV = max(0, dot(WorldNormal, V));
// 	Reservoir state = Reservoir::Empty();
// 	if ( bIsValidPixel) 
//     {
//         Reservoir curSample = Reservoir::Load(ReadReservoirData(DispatchThreadId, InputSlice));

//         int historyLimit = min(Reservoir::MaxM,MaxTemporalHistory * curSample.M);
//         state.CombineReservoirs(curSample, /* random = */ 0.5, curSample.targetPdf);
//         // state = curSample;
//         // Backproject this pixel to last frame

//         // start by just using our sample position
//         int2 prevPos = PixelCoord;
//         float ExpectedPrevLinearDepth = GBuffer.Depth;

//         float2 ViewUV = (float2(PixelCoord) + 0.5) * View.ViewSizeAndInvSize.zw;
//         float4 NDC = float4(ViewUV * float2(2, -2) + float2(-1, 1), DeviceZ, 1);

//     #if GBUFFER_HAS_VELOCITY && 0
//         // Some objects can get marked as not having velocities, which leads to DecodeGBuffer zeroing them
//         // This appears to be errant under some conditions, so overriding the rejection produces better results
//         GBuffer.Velocity = GBufferVelocityTexture.Load(int3(PixelCoord, 0));
//     #endif
//         if (GBuffer.Velocity.x > 0.0)
//         {
//             float2 Velocity = DecodeVelocityFromTexture(GBuffer.Velocity).xy;
//             float2 PrevNDC = NDC.xy - Velocity;
//             float2 PrevUV = (PrevNDC.xy * float2(1, -1) + 1) * 0.5;
//             prevPos = PrevUV * View.ViewSizeAndInvSize.xy + View.ViewRectMin.xy;
//             ExpectedPrevLinearDepth = ConvertFromDeviceZ(DeviceZ - DecodeVelocityFromTexture(GBuffer.Velocity).z);
//         }
//         else
//         {
//             float4 PrevNDC = mul(NDC, View.ClipToPrevClip);
//             PrevNDC.xyz /= PrevNDC.w;
//             float2 PrevUV = (PrevNDC.xy * float2(1, -1) + 1) * 0.5;
//             prevPos = PrevUV * View.ViewSizeAndInvSize.xy + View.ViewRectMin.xy;

//             ExpectedPrevLinearDepth = ConvertFromDeviceZ(PrevNDC.z);
//         }

//         bool foundNeighbor = false;//DisocclusionHeuristic(ScreenPos, ConvertToDeviceZ(SceneDepth), PrevUV);
// 		const float radius = 3;

// 		// Try to find a matching surface in the neighborhood of the reprojected pixel
// 		for (int i = 0; i < 9; i++)
// 		{
// 			int2 offset = 0;
// 			if (i > 0)
// 			{
// 				offset = int2((RandContext.GenerateSample2D() - 0.5f) * radius);
// 			}
// 			int2 idx = prevPos + offset;

// 			float PrevDepth = ConvertFromDeviceZ(DepthHistory.Load(int3(idx, 0)).r);
// 			float3 PrevWorldNormal = normalize(DecodeNormal(NormalHistory.Load(int3(idx, 0)).xyz));

// 			// TODO: refine sample rejection tests
// 			if (dot(GBuffer.WorldNormal, PrevWorldNormal) < 0.5)
// 			{
// 				continue;
// 			}

// 			if (abs(ExpectedPrevLinearDepth - PrevDepth) / ExpectedPrevLinearDepth > 0.1)
// 			{
// 				continue;
// 			}
// 			prevPos = idx;
// 			foundNeighbor = true;
// 			break;
// 		}

// 		if (foundNeighbor)
// 		{
//             const uint2 prePosId = clamp(floor(prevPos / UpscaleFactor  ), uint2(0,0), ReservoirBufferDim.xy - 1);
//             Reservoir prevSample = Reservoir::Load(ReadReservoirHistoryData(prePosId, 0));
//             prevSample.M = min(prevSample.M, MaxTemporalHistory);

// 			float Visible = 1.0;
            
//             float3 OffsetB = prevSample.sampleRef.Position - prevSample.sampleRef.CreationPoint;
//             float3 OffsetA = prevSample.sampleRef.Position + LWCHackToFloat(PrimaryView.PreViewTranslation) - TranslatedWorldPosition;

//             float3 SampleL = normalize(OffsetA);
//             const float a2 = max(1e-5, Pow4(GBuffer.Roughness));
//             const float3 SampleH = normalize(V + SampleL);
//             const float SampleNoH = max(0, dot(WorldNormal, SampleH));

//             float PrevNdf = D_GGX(a2, SampleNoH);
//             prevSample.M = min(prevSample.M, MaxTemporalHistory * smoothstep(0.005, 0.01, PrevNdf));
// 			const float SampleNoL = max(0, dot(WorldNormal, SampleL));
//             const float LocalBRDF = D_GGX(a2, SampleNoH) * Vis_Smith(a2, NoV, SampleNoL) * SampleNoL;

//             if( ApproxVisibility)
//                 if( !CheckVisibility(PixelCoord, GBuffer, TranslatedWorldPosition, prevSample))
//                     Visible = 0;
//             float Jocbian = 1.0;
//             if (prevSample.sampleRef.IsValid())
//             {
//                 float pNewTN =  max(1e-3, Luminance(prevSample.sampleRef.Irradiance * LocalBRDF));
            
//                 state.CombineReservoirs(prevSample, RandContext.GenerateSample1D(), Visible * pNewTN * Jocbian);
//             }
// 		}
//         state.FinalizeResampling(1, state.M);
//     }

//     WriteReservoirData(DispatchThreadId, OutputSlice, state.Store());
// }

void ApplySpatialResampling(uint2 PixelCoord,uint2 DispatchID, FGBufferData GBuffer, float DeviceZ, float3 TranslatedWorldPosition, float3 CameraDirection, inout FRandomContext RandContext, inout Reservoir state)
{
	Reservoir centerSample = Reservoir::Load(ReadReservoirData(DispatchID, InputSlice));

	state.CombineReservoirs(centerSample, /* random = */ 0.5f, centerSample.targetPdf);

	float3 WorldNormal = GBuffer.WorldNormal;
    float3 V = -CameraDirection;
    const float NoV = max(0, dot(WorldNormal, V));
	// Walk the specified number of neighbors, resampling using RIS
	//

	// Two sample modes for spatial resampling
	//   predefined low-discrepency sequence
	//   random data stored in local array for use with second pass
	int NumSamples = SpatialSamples;
	if (centerSample.M < MaxTemporalHistory)
	{
		NumSamples = max(NumSamples, SpatialSamplesBoost);
	}

	const float SSAOFactor = smoothstep(5.0, 10.0, centerSample.M);
    //float KernelRadius = lerp(2, SpatialSamplingRadius, lerp(1, SSAOTex[PixelCoord].r, SSAOFactor));
	float KernelRadius = SpatialSamplingRadius;
	const float AngleOffset = 2 * PI * /*GetRandomAngleOffset(DispatchID)*/ RandContext.GenerateSample1D();
	const int TARGET_M = 512;
	for (int i = 0; i < NumSamples && state.M < TARGET_M; ++i)
	{
		// float ang = (i + AngleOffset) * GOLDEN_ANGLE;
        // float radius = float(i + RandContext.GenerateSample1D()) * (KernelRadius / NumSamples);
         int2 PixelOffset = RandContext.GenerateSample1D() * KernelRadius;
        // int2 PixelOffset = float2(cos(ang), sin(ang)) * radius;
		const int2 SampleCoord = PixelCoord + PixelOffset;

		if (any(SampleCoord < 0) || any(SampleCoord >= View.BufferSizeAndInvSize.xy) || all(SampleCoord == PixelCoord))
		{
			continue;
		}

		// Read adjacent GBuffer data
		FGBufferData AdjGBuffer = GetGBufferDataFromSceneTexturesLoad(SampleCoord);
		float AdjDeviceZ = SceneDepthTexture.Load(int3(SampleCoord, 0)).r;
		float3 AdjWorldPosition;
		float3 AdjCameraDirection;
		ReconstructTranslatedWorldPositionAndCameraDirectionFromDeviceZ(SampleCoord, AdjDeviceZ, AdjWorldPosition, AdjCameraDirection);


		// TODO: refine sample rejection tests
		if (dot(GBuffer.WorldNormal, AdjGBuffer.WorldNormal) < SpatialNormalRejectionThreshold)
		{
			continue;
		}

		if (abs(GBuffer.Depth - AdjGBuffer.Depth) / GBuffer.Depth > SpatialDepthRejectionThreshold)
		{
			continue;
		}

		if (GBuffer.ShadingModelID != AdjGBuffer.ShadingModelID)
		{
			continue;
		}
		uint2 samplePosID = clamp(floor(SampleCoord / UpscaleFactor ), uint2(0,0), ReservoirBufferDim.xy - 1);
		Reservoir neighborSample = Reservoir::Load(ReadReservoirData(samplePosID, InputSlice));
        // neighborSample.M = min(neighborSample.M, 500);
		// Load that neighbor's RIS state, do resampling
		if (neighborSample.sampleRef.IsValid())
		{			
			//ToDo - does this need to be a permutation?
			bool Visible = true;
			if (ApproxVisibility)
			{
				Visible = CheckVisibility(SampleCoord, GBuffer, TranslatedWorldPosition, neighborSample);
			}
			float3 OffsetB = neighborSample.sampleRef.Position - neighborSample.sampleRef.CreationPoint;
			float3 OffsetA = neighborSample.sampleRef.Position + LWCHackToFloat(PrimaryView.PreViewTranslation) - TranslatedWorldPosition;
			// Discard back-face
			// if (dot(WorldNormal, OffsetA) < 0 || any(isnan(OffsetA)) || any(isnan(OffsetB)))
			// {
			// 	continue;
			// }

            float3 SampleL = normalize(OffsetA);
            const float a2 = max(1e-5, Pow4(GBuffer.Roughness));
            const float3 SampleH = normalize(V + SampleL);
            const float SampleNoH = max(0, dot(WorldNormal, SampleH));

            //float PrevNdf = D_GGX(a2, SampleNoH);
            // prevSample.M = min(prevSample.M, MaxTemporalHistory * smoothstep(0.005, 0.01, PrevNdf));
			const float SampleNoL = max(0, dot(WorldNormal, SampleL));

            const float LocalBRDF = D_GGX(a2, SampleNoH) * Vis_Smith(a2, NoV, SampleNoL) * SampleNoL;

			float pNewTN =  max(1e-3, Luminance(neighborSample.sampleRef.Irradiance * LocalBRDF));

			// float RB2 = dot(OffsetB, OffsetB);
			// float RA2 = dot(OffsetA, OffsetA);
			// OffsetB = normalize(OffsetB);
			// OffsetA = normalize(OffsetA);

			// float cosA = dot(WorldNormal, OffsetB);
			// float cosB = dot(neighborSample.sampleRef.CreationNormal, OffsetB);
			// float cosPhiA = -dot(OffsetA, neighborSample.sampleRef.Normal);
			// float cosPhiB = -dot(OffsetB, neighborSample.sampleRef.Normal);
			// // Discard extreme samples to prevent fireflies
			// if ( cosPhiB <= 0 || RA2 <= 0 || RB2 <= 0)
			// {
			// 	continue;
			// }
			// float Jocbian = RB2 * max(0.0,cosPhiA) / max(1e-5, (RA2 * cosPhiB));
			float Jocbian = 1.0;
			float neighborWeight = Visible ? Jocbian * pNewTN  : 0;
			{
				state.CombineReservoirs(neighborSample, RandContext.GenerateSample1D(), neighborWeight);
			}
		}
	}

	if (state.sampleRef.IsValid())
	{
		state.FinalizeResampling(1.0, state.M);
	}
}


RAY_TRACING_ENTRY_RAYGEN(SpatialResamplingRGS)
{
    uint2 DispatchThreadId = DispatchRaysIndex().xy + View.ViewRectMin.xy;
    //uint2 DispatchThreadId = DispatchThreadID.xy + View.ViewRectMin.xy;
	// uint2 PixelCoord = GetPixelCoord(DispatchThreadId, UpscaleFactor);
    uint2 PixelCoord = floor(float2(DispatchThreadId) * UpscaleFactor);
	if (any(PixelCoord > View.ViewSizeAndInvSize.xy))
	{
		return;
	}
	uint LinearIndex = CalcLinearIndex(PixelCoord);
	FRandomContext RandContext = FRandomContext::Create(LinearIndex, View.StateFrameIndex  + SPATIAL_SAMPLE_PASS_NUM * 63);

	FGBufferData GBuffer = GetGBufferDataFromSceneTexturesLoad(PixelCoord);
    GBuffer.Roughness = GetRayTracingClearCoatApproximateRoughness(GBuffer);
	GBuffer.Roughness = ApplySmoothBias(GBuffer.Roughness, ReflectionSmoothBias);

	float DeviceZ = SceneDepthTexture.Load(int3(PixelCoord, 0)).r;
	float3 TranslatedWorldPosition;
	float3 CameraDirection;
	ReconstructTranslatedWorldPositionAndCameraDirectionFromDeviceZ(PixelCoord, DeviceZ, TranslatedWorldPosition, CameraDirection);

    
	Reservoir state = Reservoir::Empty();
	const bool bIsDepthValid = DeviceZ > 0.0 && DeviceZ < 0.999;
    const float RoughnessFade = GetRoughnessFade(GBuffer.Roughness, ReflectionMaxRoughness);

	const bool bIsValidPixel = GBuffer.ShadingModelID != SHADINGMODELID_UNLIT && bIsDepthValid && RoughnessFade > 0;

	if (bIsValidPixel)
	{
		ApplySpatialResampling(PixelCoord, DispatchThreadId,GBuffer, DeviceZ, TranslatedWorldPosition, CameraDirection, RandContext, state);
	}
	
	WriteReservoirData(DispatchThreadId, OutputSlice, state.Store());
}

#endif
