// Copyright Epic Games, Inc. All Rights Reserved.

#define MAXIMUM_GATHER_POINTS_PER_PIXEL 32

struct FGatherPoints
{
	uint4 CreationGeometry;
	uint4 HitGeometry;
	uint4 LightInfo;
};

struct FGatherSample
{
	float3 CreationPoint;
	float3 CreationNormal;
	float3 Position;
	float3 Normal;
	float3 Irradiance;
	float M;
	float AvgWeight;
	uint LightRandom;
};


struct FRejectionCriteria
{
	float3 CreationPoint;
	float DistanceThreshold2;
};

uint2 PackIrradiance(float3 Irradiance, float M)
{
	uint2 Packed = (uint2)0;

	// Note: Consider keeping Lumiance(Y) in full range
	Packed.x = f32tof16(Irradiance.x) | (f32tof16(Irradiance.y) << 16);
	Packed.y = f32tof16(Irradiance.z) | (f32tof16(M) << 16);
	return Packed;
}

void UnpackIrradiance(uint2 Irradiance, out float3 Unpacked, out float M)
{
	Unpacked.x = f16tof32(Irradiance.x & 0xffff);
	Unpacked.y = f16tof32(Irradiance.x >> 16);
	Unpacked.z = f16tof32(Irradiance.y & 0xffff);
	M          = f16tof32(Irradiance.y >> 16);
}

uint PackNormal(float3 Normal)
{
	float alpha = 0;
	if ((Normal.x != 0 || Normal.y != 0))
	{
		alpha = atan2(Normal.y, Normal.x);
	}
	return f32tof16(alpha) | (f32tof16(Normal.z) << 16);
}

float3 UnpackNormal(uint PackedNormal)
{
	float z = f16tof32(PackedNormal >> 16);
	float alpha = f16tof32(PackedNormal & 0xffff);
	float r = sqrt(abs(1 - z * z));
	return float3(cos(alpha) * r, sin(alpha) * r, z);
}

FGatherSample ReadGatherSample(StructuredBuffer<FGatherPoints> GatherBuffer, uint BaseIndex, uint SampleIndex, uint ElementCount)
{
	FGatherSample GatherSample = (FGatherSample) 0.0;

	uint Index = BaseIndex + SampleIndex * ElementCount;

	uint4 CreationGeometry = GatherBuffer[Index].CreationGeometry;
	GatherSample.CreationPoint = asfloat(CreationGeometry.xyz);
	GatherSample.CreationNormal = UnpackNormal(CreationGeometry.w);

	uint4 HitGeometry = GatherBuffer[Index].HitGeometry;
	GatherSample.Position = asfloat(HitGeometry.xyz);
	GatherSample.Normal = UnpackNormal(HitGeometry.w);

	uint4 LightInfo = GatherBuffer[Index].LightInfo;
	UnpackIrradiance(LightInfo.xy, GatherSample.Irradiance, GatherSample.M);
	GatherSample.AvgWeight = asfloat(LightInfo.z);
	GatherSample.LightRandom = LightInfo.w;

	return GatherSample;
}

FGatherSample ReadGatherSample(RWStructuredBuffer<FGatherPoints> GatherBuffer, uint BaseIndex, uint SampleIndex, uint ElementCount)
{
	FGatherSample GatherSample = (FGatherSample)0.0;

	uint Index = BaseIndex + SampleIndex * ElementCount;

	uint4 CreationGeometry = GatherBuffer[Index].CreationGeometry;
	GatherSample.CreationPoint = asfloat(CreationGeometry.xyz);
	GatherSample.CreationNormal = UnpackNormal(CreationGeometry.w);

	uint4 HitGeometry = GatherBuffer[Index].HitGeometry;
	GatherSample.Position = asfloat(HitGeometry.xyz);
	GatherSample.Normal = UnpackNormal(HitGeometry.w);

	uint4 LightInfo = GatherBuffer[Index].LightInfo;
	UnpackIrradiance(LightInfo.xy, GatherSample.Irradiance, GatherSample.M);
	GatherSample.AvgWeight = asfloat(LightInfo.z);
	GatherSample.LightRandom = LightInfo.w;

	return GatherSample;
}

void WriteGatherSample(RWStructuredBuffer<FGatherPoints> GatherBuffer, uint BaseIndex, uint SampleIndex, uint ElementCount, FGatherSample GatherSample)
{
	uint Index = BaseIndex + SampleIndex * ElementCount;

	uint4 CreationGeometry;
	CreationGeometry.xyz = asuint(GatherSample.CreationPoint);
	CreationGeometry.w = PackNormal(GatherSample.CreationNormal);
	GatherBuffer[Index].CreationGeometry = CreationGeometry;

	uint4 HitGeometry;
	HitGeometry.xyz = asuint(GatherSample.Position);
	HitGeometry.w = PackNormal(GatherSample.Normal);
	GatherBuffer[Index].HitGeometry = HitGeometry;

	uint4 LightInfo;
	LightInfo.xy = PackIrradiance(GatherSample.Irradiance, GatherSample.M);
	LightInfo.z = asuint(GatherSample.AvgWeight);
	LightInfo.w = GatherSample.LightRandom;
	GatherBuffer[Index].LightInfo = LightInfo;
}

FRejectionCriteria CreateRejectionCriteria(float3 CreationPoint, float DistanceThreshold)
{
	FRejectionCriteria RejectionCriteria;
	RejectionCriteria.CreationPoint = CreationPoint;
	RejectionCriteria.DistanceThreshold2 = DistanceThreshold * DistanceThreshold;
	return RejectionCriteria;
}

void CreateRejectionMask(
	FRejectionCriteria RejectionCriteria,
	StructuredBuffer<FGatherPoints> GatherBuffer,
	uint BaseIndex,
	uint SampleIndex,
	uint ElementCount,
	int SampleCount,
	out bool bShouldReject[MAXIMUM_GATHER_POINTS_PER_PIXEL]
)
{
	int Index;
	for (Index = 0; Index < SampleCount; ++Index)
	{
		FGatherSample GatherSample = ReadGatherSample(GatherBuffer, BaseIndex, SampleIndex + Index, ElementCount);
		float3 GPDistance2 = RejectionCriteria.CreationPoint - GatherSample.CreationPoint;
		bShouldReject[Index] = dot(GPDistance2, GPDistance2) > RejectionCriteria.DistanceThreshold2;
	}

	for (Index = SampleCount; Index < MAXIMUM_GATHER_POINTS_PER_PIXEL; ++Index)
	{
		bShouldReject[Index] = true;
	}
}

#if !COMPUTESHADER
float3 ReconstructWorldNormalFromDeviceZ(Texture2D DepthTexture, int2 PixelCoord, float DeviceZ, float3 TranslatedWorldPosition, float3 WorldNormal)
{
	const int DepthWidth = 5;
	float DepthNX = DepthTexture.Load(int3(PixelCoord - int2(DepthWidth, 0), 0)).r;
	float DepthPX = DepthTexture.Load(int3(PixelCoord + int2(DepthWidth, 0), 0)).r;
	float DepthNY = DepthTexture.Load(int3(PixelCoord - int2(0, DepthWidth), 0)).r;
	float DepthPY = DepthTexture.Load(int3(PixelCoord + int2(0, DepthWidth), 0)).r;

	bool bIsNegative = abs(DepthNX - DeviceZ) < abs(DepthPX - DeviceZ);
	int OffsetX = bIsNegative ? -DepthWidth : DepthWidth;
	float DepthX = bIsNegative ? DepthNX : DepthPX;
	float3 PositionOffsetX = ReconstructTranslatedWorldPositionFromDeviceZ(PixelCoord + int2(OffsetX, 0), DepthX) - TranslatedWorldPosition;

	bIsNegative = abs(DepthNY - DeviceZ) < abs(DepthPY - DeviceZ);
	int OffsetY = bIsNegative ? -DepthWidth : DepthWidth;
	float DepthY = bIsNegative ? DepthNY : DepthPY;
	float3 PositionOffsetY = ReconstructTranslatedWorldPositionFromDeviceZ(PixelCoord + int2(0, OffsetY), DepthY) - TranslatedWorldPosition;
	float3 GeometricNormal = normalize(cross(PositionOffsetX, PositionOffsetY));
	if (any(isnan(GeometricNormal)))
	{
		GeometricNormal = WorldNormal;
	}
	if (dot(GeometricNormal, View.TranslatedWorldCameraOrigin - TranslatedWorldPosition) < 0)
	{
		GeometricNormal *= -1;
	}
	return GeometricNormal;
}
#endif