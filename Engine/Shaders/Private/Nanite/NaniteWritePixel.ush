// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../Common.ush"
#include "/Engine/Shared/NaniteDefinitions.h"
#if VIRTUAL_TEXTURE_TARGET
#include "../VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
#endif

RWTexture2D<uint>		OutDepthBuffer;
RWTexture2DArray<uint>	OutDepthBufferArray;
RWTexture2D<UlongType>	OutVisBuffer64;

#if VISUALIZE
RWTexture2D<UlongType>	OutDbgBuffer64;
RWTexture2D<uint>		OutDbgBuffer32;
#endif

void WritePixel(
	RWTexture2D<UlongType> OutBuffer,
	uint PixelValue,
	uint2 PixelPos,
	float DeviceZ,
	bool bDepthClamp
)
{
	if (bDepthClamp)
	{
		// When near clipping is disabled we need to move the geometry 
		DeviceZ = max(0.0f, DeviceZ);
	}

	const uint DepthInt = asuint(DeviceZ);

#if DEPTH_ONLY
	InterlockedMax( OutDepthBuffer[ PixelPos ], DepthInt );
#elif COMPILER_SUPPORTS_UINT64_IMAGE_ATOMICS
	const UlongType Pixel = PackUlongType(uint2(PixelValue, DepthInt));
	ImageInterlockedMaxUInt64(OutBuffer, PixelPos, Pixel);
#else
	#error UNKNOWN_ATOMIC_PLATFORM
#endif
}

// Optional per-pixel page translation parameters
struct WritePixelPageTranslation
{
	// TODO: We could optimize this slightly be precomputing the base layer/level offset
	int TargetLayerIndex;
	int TargetMipLevel;
	uint ArrayIndex;
};

WritePixelPageTranslation InitializeWritePixelPageTranslation()
{
	WritePixelPageTranslation Result;
	Result.TargetLayerIndex = INDEX_NONE;
	Result.TargetMipLevel = 0;
	Result.ArrayIndex = 0;
	return Result;
}

WritePixelPageTranslation InitializeWritePixelPageTranslation( FNaniteView NaniteView, bool bStaticPage )
{
	WritePixelPageTranslation Result;
	Result.TargetLayerIndex = NaniteView.TargetLayerIndex;
	Result.TargetMipLevel = NaniteView.TargetMipLevel;
	Result.ArrayIndex = bStaticPage ? GetVirtualShadowMapStaticArrayIndex() : 0;
	return Result;
}

// Write depth pixel with optional per-pixel page translation
// Supports array texture targets (third coordinate of PixelPos)
#if DEPTH_ONLY
void WriteDepthTextureArray(
	uint PixelValue,
	uint3 PixelPos,
	float DeviceZ,
	bool bDepthClamp,
	WritePixelPageTranslation PageTranslation
)
{
#if VIRTUAL_TEXTURE_TARGET
	if( PageTranslation.TargetLayerIndex != INDEX_NONE )
	{
		if( !VirtualToPhysicalTexel(PageTranslation.TargetLayerIndex, PageTranslation.TargetMipLevel, PixelPos.xy, PixelPos.xy) )
		{
			// mapped to non-commited space.
			return;
		}
	}
#endif

	if (bDepthClamp)
	{
		// When near clipping is disabled we need to move the geometry 
		DeviceZ = max(0.0f, DeviceZ);
	}

	const uint DepthInt = asuint(DeviceZ);
	InterlockedMax( OutDepthBufferArray[ PixelPos ], DepthInt );
}
#endif
