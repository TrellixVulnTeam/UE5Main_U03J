// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- ENUMS

/** Kernel enum */
	#define KERNEL_1X1 0
	#define KERNEL_3X3 1
	#define KERNEL_3X3_PLUS 2


//------------------------------------------------------- CONFIG

#if CONFIG_SCENE_COLOR_APLHA
	#define CONFIG_CACHE_LDS 0
#else
	#define CONFIG_CACHE_LDS 1
#endif

#if CONFIG_CACHE_LDS
	#define SUBTILE_SIZE 8
	#define SUBTILE_COUNT 2
	#define SUBTILE_PIXEL_COUNT (SUBTILE_SIZE * SUBTILE_SIZE)

	#define LDS_PADDING 4
#endif

#define TILE_SIZE 16

#define CONFIG_ACCUMULATE_KARIS_WEIGHTING 1

#define CONFIG_KERNEL (KERNEL_3X3)
#define CONFIG_KERNEL_SAMPLE_COUNT 9

// Use a spread factor the size of the clamping box in the history comparison to avoid one flickering input pixel
// to flicker the entire comparison neighborhood
#define CONFIG_KERNEL_SPREAD_FACTOR 3

// Uses a spread factor that varies slightly between 2x2 pixel neighborhood to reduce chances of inteference
// against structured input.
#define CONFIG_USE_DYNAMIC_SPREAD_FACTOR 1


//------------------------------------------------------- PARAMETERS

float3 OutputQuantizationError;

Texture2D<tsr_halfC> InputTexture;
Texture2D<tsr_halfC> PredictionSceneColorTexture;
Texture2D<tsr_half> ParallaxRejectionMaskTexture;

RWTexture2D<tsr_halfC> FilteredInputOutput;
RWTexture2D<tsr_halfC> FilteredPredictionSceneColorOutput;
RWTexture2D<tsr_half>  InputSceneColorLdrLumaOutput;


//------------------------------------------------------- LDS

#if CONFIG_CACHE_LDS
	#define LDS_TILE_SIZE (TILE_SIZE + 2 * LDS_PADDING)
	#define LDS_SIZE (LDS_TILE_SIZE * LDS_TILE_SIZE)

	groupshared tsr_half4 SharedArray0[LDS_SIZE];
	groupshared tsr_half4 SharedArray1[LDS_SIZE];
#endif


//------------------------------------------------------- FUNCTIONS

tsr_half ComputeColorWeight(tsr_halfC Color)
#if CONFIG_ACCUMULATE_KARIS_WEIGHTING
{
	return HdrWeight4(Color);
}
#else
{
	return tsr_half(1);
}
#endif

tsr_half ParallaxRejectionMaskToHistoryValidity(tsr_half ParallaxRejectionMask)
{
	return (ParallaxRejectionMask < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD)) ? tsr_half(0.0) : tsr_half(1.0);
}

#if CONFIG_CACHE_LDS
void ProcessAndStoreToLDS(tsr_short2 SubTileFetchCoordOffset, tsr_short2 SubTilePixelOffset, tsr_halfC Color, tsr_halfC History, tsr_half ParallaxRejectionMask)
{
	#if CONFIG_SCENE_COLOR_OVERFLOW
		#if CONFIG_SCENE_COLOR_APLHA
			Color = min(Color, LargestSceneColorRGBA);
		#else
			Color = min(Color, LargestSceneColorRGB);
		#endif
	#endif
		
	tsr_half HistorySampleValidity = ParallaxRejectionMaskToHistoryValidity(ParallaxRejectionMask);
	tsr_half InputWeight = HistorySampleValidity * ComputeColorWeight(Color);
	tsr_half HistoryWeight = HistorySampleValidity * ComputeColorWeight(History);

	tsr_short Store = dot(SubTileFetchCoordOffset, tsr_short2(1, LDS_TILE_SIZE)) + dot(SubTilePixelOffset, tsr_short2(1, LDS_TILE_SIZE));

	SharedArray0[Store] = tsr_half4(Color, InputWeight);
	SharedArray1[Store] = tsr_half4(History, HistoryWeight);
} 
#endif // CONFIG_CACHE_LDS


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint GroupWaveIndex = GetGroupWaveIndex(GroupThreadIndex, /* GroupSize = */ TILE_SIZE * TILE_SIZE);

	float4 Debug = 0.0;
	
	#if CONFIG_CACHE_LDS
		tsr_short2 SubTilePixelOffset = Map8x8Tile2x2Lane(GroupThreadIndex % SUBTILE_PIXEL_COUNT);
		tsr_short2 SubTileOffset = tsr_short2(tsr_ushort2(tsr_ushort(GroupThreadIndex) / tsr_ushort(SUBTILE_PIXEL_COUNT), tsr_ushort(GroupThreadIndex) / tsr_ushort(SUBTILE_PIXEL_COUNT * SUBTILE_COUNT)) % tsr_ushort(SUBTILE_COUNT));

		tsr_short2 TilePixelCoord = tsr_short2(InputPixelPosMin) + tsr_short2(GroupId) * tsr_short(TILE_SIZE);
		tsr_short2 TilePixelOffset = SubTilePixelOffset + tsr_short(SUBTILE_SIZE) * SubTileOffset;
	
		// Load LDS
		{
			tsr_short2 FetchOrigin = TilePixelCoord - tsr_short(LDS_PADDING);

			tsr_short2 SubTileFetchCoordOffset0 = tsr_short(SUBTILE_SIZE) * SubTileOffset;
			tsr_short2 SubTileFetchCoordOffset1 = tsr_short(SUBTILE_SIZE) * select(SubTileOffset.y == 0, tsr_short2(2, SubTileOffset.x), tsr_short2(SubTileOffset.x, 2));
			tsr_short2 SubTileFetchCoordOffset2 = tsr_short(SUBTILE_SIZE) * tsr_short(2);
		
			tsr_short2 ClampedFetchCoord0 = ClampPixelOffset((FetchOrigin + SubTileFetchCoordOffset0) + SubTilePixelOffset, InputPixelPosMin, InputPixelPosMax);
			tsr_short2 ClampedFetchCoord1 = ClampPixelOffset((FetchOrigin + SubTileFetchCoordOffset1) + SubTilePixelOffset, InputPixelPosMin, InputPixelPosMax);
			tsr_short2 ClampedFetchCoord2 = ClampPixelOffset((FetchOrigin + SubTileFetchCoordOffset2) + SubTilePixelOffset, InputPixelPosMin, InputPixelPosMax);

			tsr_halfC Color0 = InputTexture[ClampedFetchCoord0];
			tsr_halfC Color1 = InputTexture[ClampedFetchCoord1];
			tsr_halfC Color2 = InputTexture[ClampedFetchCoord2];

			tsr_halfC History0 = PredictionSceneColorTexture[ClampedFetchCoord0];
			tsr_halfC History1 = PredictionSceneColorTexture[ClampedFetchCoord1];
			tsr_halfC History2 = PredictionSceneColorTexture[ClampedFetchCoord2];

			tsr_half ParallaxRejectionMask0 = ParallaxRejectionMaskTexture[ClampedFetchCoord0];
			tsr_half ParallaxRejectionMask1 = ParallaxRejectionMaskTexture[ClampedFetchCoord1];
			tsr_half ParallaxRejectionMask2 = ParallaxRejectionMaskTexture[ClampedFetchCoord2];
		
			ProcessAndStoreToLDS(SubTileFetchCoordOffset0, SubTilePixelOffset, Color0, History0, ParallaxRejectionMask0);
			ProcessAndStoreToLDS(SubTileFetchCoordOffset1, SubTilePixelOffset, Color1, History1, ParallaxRejectionMask1);
			ProcessAndStoreToLDS(SubTileFetchCoordOffset2, SubTilePixelOffset, Color2, History2, ParallaxRejectionMask2);
		}

		GroupMemoryBarrierWithGroupSync();
		
		tsr_short2 InputPixelPos = TilePixelCoord + TilePixelOffset;
		
		{
			tsr_short LoadPos = dot(TilePixelOffset + tsr_short(LDS_PADDING), tsr_short2(1, LDS_TILE_SIZE));

			Debug.rgb = SharedArray0[LoadPos].rgb;
		}

	#else // !CONFIG_CACHE_LDS
		tsr_short2 DispatchThreadId = (
			tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
			Map16x16Tile2x2Lane(GroupThreadIndex));
		
		tsr_short2 InputPixelPos = tsr_short2(InputPixelPosMin) + DispatchThreadId;

	#endif


	// Process the samples
	tsr_halfC CenterInput = 0;
	tsr_halfC FilteredInput;
	tsr_halfC FilteredHistory;
	{
		CenterInput = tsr_half(0.0);
		FilteredInput = tsr_half(0.0);
		FilteredHistory = tsr_half(0.0);

		tsr_half FilteredInputWeight = tsr_half(0.0);
		tsr_half FilteredHistoryWeight = tsr_half(0.0);
		
		#if CONFIG_USE_DYNAMIC_SPREAD_FACTOR
			tsr_short2 DynamicSpreadFactor = (
				tsr_short(CONFIG_KERNEL_SPREAD_FACTOR) +
				tsr_short2((tsr_ushort2(InputPixelPos) % tsr_ushort(2)) ^ (tsr_ushort2(InputPixelPos.yx) % tsr_ushort(2))));
		#else
			tsr_short2 DynamicSpreadFactor = tsr_short(CONFIG_KERNEL_SPREAD_FACTOR);
		#endif

		UNROLL_N(CONFIG_KERNEL_SAMPLE_COUNT)
		for (uint SampleId = 0; SampleId < CONFIG_KERNEL_SAMPLE_COUNT; SampleId++)
		{
			tsr_short2 Offset;
			tsr_half SampleSpatialWeight;
		
			#if CONFIG_KERNEL == KERNEL_1X1
			{
				Offset = 0;
				SampleSpatialWeight = tsr_half(1.0);
			}
			#elif CONFIG_KERNEL == KERNEL_3X3 || CONFIG_KERNEL == KERNEL_3X3_PLUS
			{
				Offset = tsr_short2(kOffsets3x3[SampleId]);
			
				#if CONFIG_KERNEL == KERNEL_3X3_PLUS
					if (abs(Offset.x) + abs(Offset.y) > 1)
					{
						continue;
					}
				#endif
			
				#if 0
					SampleSpatialWeight = tsr_half(1.0);
				#elif 1
					SampleSpatialWeight = tsr_half(rcp(abs(Offset.x) + 1.0) * rcp(abs(Offset.y) + 1.0));
				#else
					SampleSpatialWeight = tsr_half(rcp(abs(Offset.x) + abs(Offset.y)));
				#endif
			}
			#else
				#error Unknown kernel
			#endif
		
			tsr_halfC InputSample;
			tsr_halfC HistorySample;

			tsr_half InputWeight;
			tsr_half HistoryWeight;
			#if CONFIG_CACHE_LDS
			{
				tsr_short LoadPos = (
					dot(TilePixelOffset, tsr_short2(1, LDS_TILE_SIZE)) +
					dot(tsr_short(LDS_PADDING).xx, tsr_short2(1, LDS_TILE_SIZE)) +
					dot(DynamicSpreadFactor * Offset, tsr_short2(1, LDS_TILE_SIZE)));

				InputSample = SharedArray0[LoadPos].rgb;
				HistorySample = SharedArray1[LoadPos].rgb;

				InputWeight = SharedArray0[LoadPos].a;
				HistoryWeight = SharedArray1[LoadPos].a;
			}
			#else // !CONFIG_CACHE_LDS
			{
				tsr_short2 SampleInputPixelPos = InputPixelPos + ClampPixelOffset(
					InputPixelPos,
					DynamicSpreadFactor * Offset, Offset,
					InputPixelPosMin, InputPixelPosMax);

				InputSample = InputTexture[SampleInputPixelPos];
				HistorySample = PredictionSceneColorTexture[SampleInputPixelPos];

				tsr_half HistorySampleValidity = ParallaxRejectionMaskToHistoryValidity(
					ParallaxRejectionMaskTexture[SampleInputPixelPos]);

				#if CONFIG_SCENE_COLOR_OVERFLOW
					#if CONFIG_SCENE_COLOR_APLHA
						InputSample = min(InputSample, LargestSceneColorRGBA);
					#else
						InputSample = min(InputSample, LargestSceneColorRGB);
					#endif
				#endif

				InputWeight = HistorySampleValidity * ComputeColorWeight(InputSample);
				HistoryWeight = HistorySampleValidity * ComputeColorWeight(HistorySample);
			}
			#endif // !CONFIG_CACHE_LDS

			FilteredInput       += (SampleSpatialWeight * InputWeight) * InputSample;
			FilteredInputWeight += (SampleSpatialWeight * InputWeight);
		
			FilteredHistory       += (SampleSpatialWeight * HistoryWeight) * HistorySample;
			FilteredHistoryWeight += (SampleSpatialWeight * HistoryWeight);

			if (all(Offset == tsr_short(0)))
			{
				CenterInput = InputSample;
			}

		}
		
		{
			FilteredInput *= SafeRcp(FilteredInputWeight);
			FilteredHistory *= SafeRcp(FilteredHistoryWeight);
		}
	}

	// Compute the LDR luma used for spatial anti-aliasing's computation of the TexelOffset
	#if DIM_OUTPUT_ANTI_ALIASING_LUMA
	tsr_half CenterLumaLDR;
	{
		const tsr_half SpatialAAExposure = tsr_half(0.5);

		#if 0
			tsr_half3 CenterInputLDR = CenterInput / (SpatialAAExposure + CenterInput);
			CenterLumaLDR = dot(CenterInputLDR, half3(0.299f, 0.587f, 0.114f));
		#elif 0
			tsr_half CenterLuma = max(CenterInput.r, max(CenterInput.g, CenterInput.b));
			CenterLumaLDR = CenterLuma / (SpatialAAExposure + CenterLuma);
		#else
			tsr_half CenterLuma = dot(CenterInput.rgb, half3(0.299f, 0.587f, 0.114f));
			CenterLumaLDR = CenterLuma / (SpatialAAExposure + CenterLuma);
		#endif
	}
	#endif // DIM_OUTPUT_ANTI_ALIASING_LUMA
	
	tsr_short2 OutputPixelPos;
	#if !CONFIG_CACHE_LDS
		ISOLATE
		{
			OutputPixelPos = (
				tsr_short2(InputPixelPosMin) +
				tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
				Map16x16Tile2x2Lane(GetGroupThreadIndex(GroupThreadIndex, GroupWaveIndex)));
		}
	#else
		OutputPixelPos = InputPixelPos;
	#endif

	#if CONFIG_ENABLE_STOCASTIC_QUANTIZATION
	{
		uint2 Random = Rand3DPCG16(int3(OutputPixelPos, View.StateFrameIndexMod8)).xy;
		tsr_half E = tsr_half(Hammersley16(0, 1, Random).x);
		
		FilteredInput = QuantizeForFloatRenderTarget(FilteredInput, E.x, OutputQuantizationError);
		FilteredHistory = QuantizeForFloatRenderTarget(FilteredHistory, E.x, OutputQuantizationError);
	}
	#endif

	OutputPixelPos.x = all(OutputPixelPos < tsr_short2(LowFrequencyInfo_ViewportMax)) ? OutputPixelPos.x : ~tsr_short(0);

	FilteredInputOutput[OutputPixelPos] = FilteredInput;
	FilteredPredictionSceneColorOutput[OutputPixelPos] = FilteredHistory;

	#if DIM_OUTPUT_ANTI_ALIASING_LUMA
	{
		InputSceneColorLdrLumaOutput[OutputPixelPos] = CenterLumaLDR;
	}
	#endif

	#if DEBUG_OUTPUT
	{
		DebugOutput[OutputPixelPos - LowFrequencyInfo_ViewportMin] = Debug;
	}
	#endif
}
