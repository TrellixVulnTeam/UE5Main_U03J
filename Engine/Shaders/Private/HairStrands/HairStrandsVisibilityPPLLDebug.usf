// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../ShaderPrint.ush"
#include "HairStrandsVisibilityCommon.ush" 

float PPLLMeanListElementCountPerPixel;
float PPLLMaxTotalListElementCount;

Texture2D<uint> PPLLCounter;
Texture2D<uint> PPLLNodeIndex;
StructuredBuffer<FPackedHairVisPPLL> PPLLNodeData;

RWTexture2D<float4> SceneColorTextureUAV;

FFontColor GetOccupancyColor(float In)
{
	float3 Color = lerp(float3(0, 1, 0), float3(1, 0, 0), saturate(In));
	return InitFontColor(Color);
}

[numthreads(8, 8, 1)]
void VisibilityDebugPPLLCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	int2 PixelPos = DispatchThreadId.xy;
	float PPLLListElementcount = PPLLCounter[uint2(0, 0)];

	uint NextNodeIndex = PPLLNodeIndex[PixelPos];
	if (NextNodeIndex != 0xFFFFFFFF)
	{
		uint StrandCount = 0;
		do
		{
			StrandCount++;
			FPackedHairVisPPLL Node = PPLLNodeData[NextNodeIndex];
			NextNodeIndex = Node.NextNodeIndex;
		} while (NextNodeIndex != 0xFFFFFFFF);

		float l = saturate(StrandCount / PPLLMeanListElementCountPerPixel);

		SceneColorTextureUAV[PixelPos] = float4(l, 1.0f - l, 0.0f, 0.0f);
	}

	const float2 BarOrigin = 100.0f;
	const float2 BarSize = float2(200.0f, 20.0f);
	if (all(PixelPos >= BarOrigin) && all(PixelPos <= (BarOrigin + BarSize)))
	{
		float2 LocalPos = PixelPos - BarOrigin;
		float MemoryUsage = PPLLListElementcount / PPLLMaxTotalListElementCount;

		if (MemoryUsage > LocalPos.x / BarSize.x)
		{
			SceneColorTextureUAV[PixelPos] = float4(MemoryUsage, 1.0f - MemoryUsage, 1.0f - MemoryUsage, 0.0f);
		}
		else
		{
			SceneColorTextureUAV[PixelPos] = float4(0.2f, 0.2f, 0.2f, 0.0f);
		}

		if (any(PixelPos == BarOrigin) || any(PixelPos == (BarOrigin + BarSize)))
		{
			SceneColorTextureUAV[PixelPos] = float4(1.0f, 1.0f, 1.0f, 0.0f);
		}
	}

	if (DispatchThreadId.x == 0 && DispatchThreadId.y == 0)
	{
		ShaderPrintFilter(true);

		const float PPLLNodeSizeInMb = (4 + 4 + 4) / 1000000.f;
		const float NodePercentage = float(PPLLListElementcount) / float(PPLLMaxTotalListElementCount);

		float2 StartPos = (BarOrigin + BarSize*float2(0.0f, 2.0f)) * View.ViewSizeAndInvSize.zw;
		float2 Pos = StartPos;
		Pos = Print(Pos, TEXT("Mean Node Per Pixel : "));
		Pos = ShaderPrint(Pos, PPLLMeanListElementCountPerPixel, FontEmerald);
		Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
		
		Pos = Print(Pos, TEXT("Nodes Used (%)      : "));
		Pos = ShaderPrint(Pos, NodePercentage * 100.f, GetOccupancyColor(NodePercentage));
		Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

		Pos = Print(Pos, TEXT("Nodes Used          : "));
		Pos = ShaderPrint(Pos, PPLLListElementcount, FontSilver);
		Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

		Pos = Print(Pos, TEXT("Allocated Nodes (Mb): "));
		Pos = ShaderPrint(Pos, PPLLMaxTotalListElementCount * PPLLNodeSizeInMb, FontSilver);
		Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

		Pos = Print(Pos, TEXT("Total               : "));
		Pos = ShaderPrint(Pos, PPLLMaxTotalListElementCount, FontOrange);
		Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
	}
}
