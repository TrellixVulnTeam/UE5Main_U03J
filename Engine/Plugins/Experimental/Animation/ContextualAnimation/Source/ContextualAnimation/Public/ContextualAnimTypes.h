// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Animation/AnimSequence.h"
#include "Templates/SubclassOf.h"
#include "GameplayTagContainer.h"
#include "ContextualAnimTypes.generated.h"

CONTEXTUALANIMATION_API DECLARE_LOG_CATEGORY_EXTERN(LogContextualAnim, Log, All);

class AActor;
class UAnimMontage;
class UContextualAnimSelectionCriterion;

namespace UE 
{
	namespace ContextualAnim 
	{
		enum class EForEachResult : uint8
		{
			Break,
			Continue,
		};
	}
}

/** Container for alignment tracks */
USTRUCT()
struct CONTEXTUALANIMATION_API FContextualAnimAlignmentTrackContainer
{
	GENERATED_BODY()

	UPROPERTY()
	FAnimSequenceTrackContainer Tracks;

	UPROPERTY()
	float SampleInterval = 0.f;

	void Initialize(int32 InNumTracks, float InSampleInterval)
	{
		Tracks.AnimationTracks.Empty(InNumTracks);
		Tracks.TrackNames.Empty(InNumTracks);
		SampleInterval = InSampleInterval;
	}

	void Empty()
	{
		Tracks.AnimationTracks.Empty();
		Tracks.TrackNames.Empty();
		SampleInterval = 0.f;
	}

	FTransform ExtractTransformAtTime(int32 TrackIndex, float Time) const;
	FTransform ExtractTransformAtTime(const FName& TrackName, float Time) const;
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimTrack
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	UAnimMontage* Animation = nullptr;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float AnimMaxStartTime = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bRequireFlyingMode = false;

	/** Container for alignment tracks */
	UPROPERTY()
	FContextualAnimAlignmentTrackContainer AlignmentData;

	/** Container for auto generate IK Target Tracks */
	UPROPERTY()
	FContextualAnimAlignmentTrackContainer IKTargetData;

	UPROPERTY(EditAnywhere, Instanced, Category = "Defaults")
	TArray<UContextualAnimSelectionCriterion*> SelectionCriteria;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform MeshToScene;

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Defaults", meta = (GetOptions = "GetRoles"))
	FName Role = NAME_None;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Defaults")
	int32 VariantIdx = INDEX_NONE;

	float GetSyncTimeForWarpSection(int32 WarpSectionIndex) const;
	float GetSyncTimeForWarpSection(const FName& WarpSectionName) const;

	FORCEINLINE FTransform GetAlignmentTransformAtTime(float Time) const { return AlignmentData.ExtractTransformAtTime(0, Time); }
	FORCEINLINE FTransform GetAlignmentTransformAtEntryTime() const { return AlignmentData.ExtractTransformAtTime(0, 0.f); }
	FORCEINLINE FTransform GetAlignmentTransformAtSyncTime() const { return AlignmentData.ExtractTransformAtTime(0, GetSyncTimeForWarpSection(0)); }

	float FindBestAnimStartTime(const FVector& LocalLocation) const;

	bool DoesQuerierPassSelectionCriteria(const FContextualAnimPrimaryActorData& PrimaryActorData, const FContextualAnimQuerierData& QuerierData) const;

	static const FContextualAnimTrack EmptyTrack;
};

/** Defines when the actor should start playing the animation */
UENUM(BlueprintType)
enum class EContextualAnimJoinRule : uint8
{
	Default,
	Late
};

UENUM(BlueprintType)
enum class EContextualAnimIKTargetProvider : uint8
{
	/** 
	 * IK Targets are auto generated from the animations 
	 * @see: UContextualAnimSceneAssetBase::GenerateIKTargetTracks
	 */
	Autogenerated,

	/** IK Target defined by a bone or a socket in the animation */
	Bone,

	//@TODO: Add collision query methods
};

USTRUCT(BlueprintType)
struct FContextualAnimIKTargetDefinition
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName GoalName = NAME_None;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName BoneName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	EContextualAnimIKTargetProvider Provider = EContextualAnimIKTargetProvider::Autogenerated;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName TargetRoleName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName TargetBoneName = NAME_None;

	bool operator==(const FContextualAnimIKTargetDefinition& Other) const 
	{
		return  GoalName == Other.GoalName && 
				BoneName == Other.BoneName && 
				Provider == Other.Provider && 
				TargetRoleName == Other.TargetRoleName &&
				TargetBoneName == Other.TargetBoneName;
	}
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimIKTarget
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName GoalName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float Alpha = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;

	FContextualAnimIKTarget() {}
	FContextualAnimIKTarget(const FName& InGoalName, float InAlpha, const FTransform& InTransform)
		: GoalName(InGoalName), Alpha(InAlpha), Transform(InTransform) {}

	static const FContextualAnimIKTarget InvalidIKTarget;
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimIKTargetDefContainer
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TArray<FContextualAnimIKTargetDefinition> IKTargetDefs;

	static const FContextualAnimIKTargetDefContainer EmptyContainer;
};

USTRUCT(BlueprintType)
struct FContextualAnimStartSceneParams
{
	GENERATED_BODY()

	/** Map with actors to bind to each role in the scene */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TMap<FName, AActor*> RoleToActorMap;

	/** Desired variant. If INDEX_NONE the Manager will attempt to find the best variant to use by running the selection criteria */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	int32 VariantIdx = INDEX_NONE;

	/** Desired start time */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float AnimStartTime = 0.f;

	void Reset()
	{
		RoleToActorMap.Reset();
		VariantIdx = INDEX_NONE;
		AnimStartTime = 0.f;
	}
};

///////////////////////////////////////////////////////////////////////

/** Stores the result of a query function */
USTRUCT(BlueprintType)
struct FContextualAnimQueryResult
{
	GENERATED_BODY()

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<UAnimMontage> Animation;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	FTransform EntryTransform;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	FTransform SyncTransform;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	float AnimStartTime = 0.f;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	int32 VariantIdx = INDEX_NONE;

	void Reset()
	{
		Animation.Reset();
		EntryTransform = SyncTransform = FTransform::Identity;
		AnimStartTime = 0.f;
		VariantIdx = INDEX_NONE;
	}

	FORCEINLINE bool IsValid() const { return VariantIdx != INDEX_NONE; }
};

/** Stores the parameters passed into query function */
USTRUCT(BlueprintType)
struct FContextualAnimQueryParams
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<const AActor> Querier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform QueryTransform;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bComplexQuery = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bFindAnimStartTime = false;

	FContextualAnimQueryParams() {}

	FContextualAnimQueryParams(const AActor* InQuerier, bool bInComplexQuery, bool bInFindAnimStartTime)
		: Querier(InQuerier), bComplexQuery(bInComplexQuery), bFindAnimStartTime(bInFindAnimStartTime) {}

	FContextualAnimQueryParams(const FTransform& InQueryTransform, bool bInComplexQuery, bool bInFindAnimStartTime)
		: QueryTransform(InQueryTransform), bComplexQuery(bInComplexQuery), bFindAnimStartTime(bInFindAnimStartTime) {}
};

USTRUCT(BlueprintType)
struct FContextualAnimQuerierData
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FVector Velocity = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FGameplayTagContainer GameplayTags;
};

USTRUCT(BlueprintType)
struct FContextualAnimPrimaryActorData
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;
};